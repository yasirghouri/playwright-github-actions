name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  playwright-run:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      required_packages: apt-transport-https ca-certificates chromium curl gnupg-agent software-properties-common libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb postgresql-client
    outputs:
      job-id: ${{ steps.job_id.outputs.result }}
      status: ${{ steps.test-runner.conclusion == 'success' && 'passed' || steps.test-runner.conclusion == 'failure' && 'failed' || 'encountered an exception' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Resolve job ID from workflow run, accounting for matrix strategy.
        id: job_id
        uses: actions/github-script@main
        env:
          matrix: ${{ toJson(matrix) }}
        with:
          script: |
            const { data: workflow_run } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matrix = JSON.parse(process.env.matrix);
            const job_name = `${context.job}${matrix ? ` (${Object.values(matrix).join(", ")})` : ""}`;
            return workflow_run.jobs.find((job) => job.name.match(new RegExp(`^(?:[^/]*/\\s*)?${job_name}$`)))?.id;

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test
        continue-on-error: true
        id: test-runner

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  slack-notifier:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    permissions:
      actions: read
      contents: read
    needs: playwright-run
    steps:
      # Get test results
      - name: Get test results
        id: get_logs
        run: |
          # Get test results and escape for JSON
          RESULTS=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/jobs/${{ needs.playwright-run.outputs.job-id }}/logs \
            | (grep -E "‚úò.*‚Ä∫.*tests/" || echo "No errors found") | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g")

          # Escape for JSON
          ESCAPED=$(echo "$RESULTS" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "result=$ESCAPED" >> $GITHUB_OUTPUT

      # Simple Slack notification
      - name: Post to Slack
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "${{ steps.test-runner.outcome == 'success' && '‚úÖ' || '‚ùå' }} Playwright tests ${{ steps.test-runner.outcome }} for `${{ github.repository }}`\n\nüìã **Details:**\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Commit: ${{ github.event.head_commit.message }}\n‚Ä¢ Author: ${{ github.event.head_commit.author.name || github.actor }}\n\n GITHUB-REPOSITORY: ${{ github.repository }}\n\n GITHUB-TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n JOB-ID: ${{ needs.playwright-run.outputs.job-id }}\n\n STATUS: ${{ needs.playwright-run.outputs.status }}\n\nError log\n```\n${{ steps.get_logs.outputs.result }}\n```\n\n <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| View the run on GitHub>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
